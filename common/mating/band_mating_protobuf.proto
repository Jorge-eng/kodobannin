enum Directive = {
  BAND_SEND_IDENTIFIER,
  ACK_MATE, // expected action
  MATE
}

message Hello {
  enum Type = {
    SERVER_APP_AUTH_TOKEN_INITIATE_MATE,
    SERVER_OR_APP_BAND_INITIATE_MATE, // contains BAND_INIT_MATING, nonce1
  }
}

// Encrypted with HELLO_PRIVATE_KEY, decrypt with HELLO_PUBLIC_KEY
message SERVER_MATING_BLOB1 {
  enum Directive; // should be BAND_SEND_IDENTIFIER
  sint64 encrypted_band_nonce1;
}

// Encrypted with HELLO_PUBLIC_KEY, decrypt with HELLO_PRIVATE_KEY
message BAND_ACK_MATING {
  enum Directive; // should be ACK_MATE
  sint64 encrypted_band_nonce2;
  sint64 BAND_ID;
}

// Encrypted with HELLO_PRIVATE_KEY, decrypt with HELLO_PUBLIC_KEY
message SERVER_MATING_BLOB2 {
  bytes band_payload; // Should be SERVER_MATING_BLOB2_enc_BAND
}

message SERVER_MATING_BLOB2_enc_BAND {
  // Encrypted with BAND_PUBLIC_KEY
  enum Directive; // should be MATE
  sint64 encrypted_band_nonce2;
  bytes user_public_key;
}

//

// always signed with HELLO_PUBLIC_KEY or HELLO_PRIVATE_KEY
message hello_instruction_wrapper {
  repeated hello_instruction instructions;
}

message hello_instruction {
  enum target = {
    server;
    app;
    band;
  }
}
