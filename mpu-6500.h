#pragma once
// Based on MPU-6500 Register Map and Descriptions Revision 2.0

#define CHIP_ID 0x70

enum MPU_Registers {
	MPU_REG_CONFIG   = 0x1A,
	MPU_REG_GYRO_CFG = 0x1B,
	MPU_REG_ACC_CFG  = 0x1C,
	MPU_REG_WOM_THR  = 0x1F,
	MPU_REG_FIFO_EN  = 0x23,
	MPU_REG_INT_CFG  = 0x37,
	MPU_REG_INT_EN   = 0x38,
	MPU_REG_INT_STS  = 0x3A,
	MPU_REG_ACC_X_HI = 0x3B,
	MPU_REG_ACC_X_LO = 0x3C,
	MPU_REG_ACC_Y_HI = 0x3D,
	MPU_REG_ACC_Y_LO = 0x3E,
	MPU_REG_ACC_Z_HI = 0x3F,
	MPU_REG_ACC_Z_LO = 0x40,
	MPU_REG_TMP_HI   = 0x41,
	MPU_REG_TMP_LO   = 0x42,
	MPU_REG_GYRO_X_HI = 0x43,
	MPU_REG_GYRO_X_LO = 0x44,
	MPU_REG_GYRO_Y_HI = 0x45,
	MPU_REG_GYRO_Y_LO = 0x46,
	MPU_REG_GYRO_Z_HI = 0x47,
	MPU_REG_GYRO_Z_LO = 0x48,
	MPU_REG_SIG_RST  = 0x68,
	MPU_REG_ACCEL_INTEL_CTRL = 0x69,
	MPU_REG_USER_CTL = 0x6A,
	MPU_REG_PWR_MGMT_1 = 0x6B,
	MPU_REG_PWR_MGMT_2 = 0x6C,
	MPU_REG_FIFO_CNT_HI = 0x72,
	MPU_REG_FIFO_CNT_LO = 0x73,
	MPU_REG_FIFO     = 0x74,
	MPU_REG_WHO_AM_I = 0x75,
};

enum MPU_Reg_Bits {
	CONFIG_FIFO_MODE_DROP = (1UL << 6),
	CONFIG_DLPF_MASK = 0x7,

	INT_CFG_ACT_LO        = (1UL << 7),
	INT_CFG_ACT_HI        = (0UL << 7),
	INT_CFG_PUSH_PULL     = (0UL << 6),
	INT_CFG_OPEN_DRN      = (1UL << 6),
	INT_CFG_LATCH_OUT     = (1UL << 5),
	INT_CFG_PULSE_OUT     = (0UL << 5),
	INT_CFG_CLR_ANY_READ  = (1UL << 4),
	INT_CFG_CLR_ON_STS    = (1UL << 4),
	INT_CFG_FSYNC_ACT_LO  = (1UL << 3),
	INT_CFG_FSYNC_ACT_HI  = (0UL << 3),
	INT_CFG_INT_ON_FSYNC  = (1UL << 2),
	INT_CFG_BYPASS_EN     = (1UL << 1),

	INT_EN_WOM         = (1UL << 6),
	INT_EN_FIFO_OVRFLO = (1UL << 4),
	INT_EN_FSYNC       = (1UL << 3),
	INT_EN_RAW_READY   = (1UL << 0),

	GYRO_CFG_X_TEST         = (1UL << 7),
	GYRO_CFG_Y_TEST         = (1UL << 6),
	GYRO_CFG_Z_TEST         = (1UL << 5),
	GYRO_CFG_RATE_2k_DPS    = 0x3,
	GYRO_CFG_RATE_1k_DPS    = 0x2,
	GYRO_CFG_RATE_500_DPS   = 0x1,
	GYRO_CFG_RATE_250_DPS   = 0,
	GYRO_CFG_RATE_OFFET     = 3,
	GYRO_CFG_FCHOICE_B_MASK = 0x3,

	ACCEL_CFG_X_TEST     = (1UL << 7),
	ACCEL_CFG_Y_TEST     = (1UL << 7),
	ACCEL_CFG_Z_TEST     = (1UL << 7),
	ACCEL_CFG_SCALE_2G   = 0x0,
	ACCEL_CFG_SCALE_4G   = 0x4,
	ACCEL_CFG_SCALE_8G   = 0x8,
	ACCEL_CFG_SCALE_16G  = 0xC,

	ACCEL_CFG2_FCHOICE_B    = (1 << 3),
	ACCEL_CFG2_DPL_CFG_MASK = 3,

	FIFO_EN_QUEUE_TEMP   = (1UL << 7),
	FIFO_EN_QUEUE_GYRO_X = (1UL << 6),
	FIFO_EN_QUEUE_GYRO_Y = (1UL << 5),
	FIFO_EN_QUEUE_GYRO_Z = (1UL << 4),
	FIFO_EN_QUEUE_ACCEL  = (1UL << 3),
	FIFO_EN_QUEUE_SLAVE2 = (1UL << 2),
	FIFO_EN_QUEUE_SLAVE1 = (1UL << 1),
	FIFO_EN_QUEUE_SLAVE0 = (1UL << 0),

	ACCEL_INTEL_CTRL_EN        = (1UL << 7),
	ACCEL_INTEL_CTRL_6500_MODE = (1UL << 6),

	USR_CTL_FIFO_EN  = (1UL << 6),
	USR_CTL_I2C_EN   = (1UL << 5),
	USR_CTL_I2C_DIS  = (1UL << 4),
	USR_CTL_FIFO_RST = (1UL << 2),
	USR_CTL_SIG_RST  = (1UL << 0),

	MPU_REG_PWR_MGMT_1_RESET = (1UL << 7),
	MPU_REG_PWR_MGMT_1_SLEEP = (1UL << 6),
	MPU_REG_PWR_MGMT_1_CYCLE = (1UL << 5),
	MPU_REG_PWR_MGMT_1_GYRO_STANDBY = (1UL << 4),
	MPU_REG_PWR_MGMT_1_PD_PTAT = (1UL << 3),
	MPU_REG_PWR_MGMT_1_CLK_STOP = 0x7,
	MPU_REG_PWR_MGMT_1_CLK_OSC = 0x0,
	MPU_REG_PWR_MGMT_1_CLK_BEST = 0x1,

	MPU_REG_PWR_MGMT_2_LP_WAKE_OFFSET = 0x6,
	MPU_REG_PWR_MGMT_2_WAKE_1_25HZ = 0x0,
	MPU_REG_PWR_MGMT_2_WAKE_5HZ    = 0x1,
	MPU_REG_PWR_MGMT_2_WAKE_20HZ   = 0x2,
	MPU_REG_PWR_MGMT_2_WAKE_40HZ   = 0x3,
	MPU_REG_PWR_MGMT_2_ACCEL_X_DIS = (1UL << 5),
	MPU_REG_PWR_MGMT_2_ACCEL_Y_DIS = (1UL << 4),
	MPU_REG_PWR_MGMT_2_ACCEL_Z_DIS = (1UL << 3),
	MPU_REG_PWR_MGMT_2_GYRO_X_DIS  = (1UL << 2),
	MPU_REG_PWR_MGMT_2_GYRO_Y_DIS  = (1UL << 1),
	MPU_REG_PWR_MGMT_2_GYRO_Z_DIS  = (1UL << 0),
};
